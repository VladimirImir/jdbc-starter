package com.dev.jdbc.starter;

import com.dev.jdbc.starter.util.ConnectionManager;
import org.postgresql.Driver;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class JdbcRunner {

    public static void main(String[] args) throws SQLException {

        /** JDBC. 17. DAO. Теория */

        //Class<Driver> driverClass = Driver.class;
        //String sql = """
                /*CREATE TABLE IF NOT EXISTS info (
                    id SERIAL PRIMARY KEY ,
                    data TEXT NOT NULL 
                );*/
                /*INSERT INTO info (data)
                VALUES 
                ('Test1'),
                ('Test2'),
                ('Test3'),
                ('Test4');*/
                /*UPDATE info
                SET data = 'TestTest'
                WHERE id = 5
                RETURNING **/
                /*SELECT *
                FROM ticket*/
                /*INSERT INTO info (data)
                VALUES
                ('autogenerated')
                """;
       // try (var connection = ConnectionManager.open();
            // var statement = connection.createStatement()) {
            //System.out.println(connection.getSchema());
            //System.out.println(connection.getTransactionIsolation());*/
        //var executeResult = statement.execute(sql);
        //var executeResult = statement.executeUpdate(sql);
        //var executeResult = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
        //var generatedKeys = statement.getGeneratedKeys();
        //if (generatedKeys.next()){
        //     var generatedId = generatedKeys.getInt("id");
        //     System.out.println(generatedId);
        // }
        //var executeResult = statement.executeQuery(sql);
        //System.out.println(executeResult);
        //System.out.println(statement.getUpdateCount());
            /*while (executeResult.next()) {
                System.out.println(executeResult.getLong("id"));
                System.out.println(executeResult.getString("passenger_no"));
                System.out.println(executeResult.getBigDecimal("cost"));
                System.out.println("--------");
            }*/
        //}
        /*Long flightId = 2L;
        var result = getTicketsByFlightId(flightId);
        System.out.println(result);*/
        //var result = getFlightsBetween(LocalDate.of(2020, 1, 1).atStartOfDay(), LocalDateTime.now());
        //System.out.println(result);
        try {
            checkMetaData();
        } finally {
            ConnectionManager.closePool();
        }

    }

    private static void checkMetaData() throws SQLException {
        try (var connection = ConnectionManager.get()) {
            var metaData = connection.getMetaData();
            var catalogs = metaData.getCatalogs();
            while (catalogs.next()) {
                var catalog = catalogs.getString(1);
                //System.out.println(catalog);
                var schemas = metaData.getSchemas();
                while (schemas.next()) {
                    var schema = schemas.getString("TABLE_SCHEM");
                    //System.out.println(schema);
                    var tables = metaData.getTables(catalog, schema, "%", new String[]{"TABLE"});
                    if (schema.equals("public")) {
                        while (tables.next()) {
                            System.out.println(tables.getString("TABLE_NAME"));
                        }
                    }
                }
            }
        }
    }

    public static List<Long> getFlightsBetween(LocalDateTime start, LocalDateTime end) throws SQLException {
        String sql = """
                SELECT id
                FROM flight
                WHERE departure_date BETWEEN ? AND ?
                """;
        List<Long> result = new ArrayList<>();
        try (var connection = ConnectionManager.get();
             var prepareStatement = connection.prepareStatement(sql)) {
            prepareStatement.setFetchSize(50);
            prepareStatement.setQueryTimeout(10);
            prepareStatement.setMaxRows(100);

            System.out.println(prepareStatement);
            prepareStatement.setTimestamp(1, Timestamp.valueOf(start));
            System.out.println(prepareStatement);
            prepareStatement.setTimestamp(2, Timestamp.valueOf(end));
            System.out.println(prepareStatement);


            var resultSet = prepareStatement.executeQuery();
            while (resultSet.next()) {
                result.add(resultSet.getLong("id"));
            }
        }
        return result;
    }

    public static List<Long> getTicketsByFlightId(Long flightId) throws SQLException {
        String sql = """
                SELECT id
                FROM ticket
                WHERE flight_id = ?
                --WHERE flight_id = %s
                """;//.formatted(flightId);
        List<Long> result = new ArrayList<>();
        try (var connection = ConnectionManager.get();
             //var statement = connection.createStatement()) {
             var prepareStatement = connection.prepareStatement(sql)) {
            prepareStatement.setLong(1, flightId);
            var resultSet = prepareStatement.executeQuery();
            //var resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                //result.add(resultSet.getLong("id"));
                result.add(resultSet.getObject("id", Long.class)); // NULL safe
            }
        }
        return result;
    }
}
